As a DevOps Engineer, I set up a secure Windows/Linux infrastructure for a health insurance project. I automated deployments and used Alpine Linux to containerize Java applications for better performance. I also installed SonarQube on AWS EC2 to help improve code quality and speed up development.

He is skilled at finding and fixing web application security issues. He built automation solutions using Shell and Groovy scripts, which were integrated with CI/CD tools like Jenkins and GitLab for smooth deployments on Windows, Ubuntu, Debian, CentOS, and Red Hat Linux systems.

automated .NET deployments to IIS using Jenkins and MS Build. I set up Nagios for monitoring, created dashboards and alerts using Nagios and Zabbix, and used Graylog for log analysis and early issue detection.

used Ansible to automate patching, fix vulnerabilities, and install packages on over 50 Windows and Linux servers. I migrated .NET apps to Windows Server 2019 R2 and moved Jenkins and GitLab to EKS, which helped cut compute costs. I also built AWS infrastructure using CloudFormation and Terraform, and improved application performance by analyzing the framework in depth.

Implement GitOps using ArgoCD with automated sync, RBAC, and templated multi-cluster deployments via Helm/Kustomize.
Enable progressive delivery with canary or blue-green strategies for robust CI/CD.


name: CI/CD Pipeline
docker build \
  --build-arg VERSION=1.2.3 \
  --build-arg SHA=abc123 \
  --build-arg BUILD_NUMBER=42 \
  -t test-app .

docker run -p 5000:5000 test-app
on:
  push:
    branches:
      - main
      - 'release/*'
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Get Version
      id: version
      run: |
        # Get the release branch name (e.g., release/v1.0.0)
        branch_name="${GITHUB_REF##*/}"
        commit_sha="${GITHUB_SHA}"
        
        if [[ "$branch_name" =~ ^release/ ]]; then
          # Use the release branch name and the commit SHA as the version
          VERSION="${branch_name//release\//}-${commit_sha:0:7}"
        else
          # Default version for non-release branches
          VERSION="dev-${commit_sha:0:7}"
        fi
        
        echo "VERSION=${VERSION}" >> $GITHUB_ENV

    - name: Build Docker image
      run: |
        docker build --build-arg VERSION=${{ env.VERSION }} -t my-flask-app:${{ github.sha }} .

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image to Docker Hub
      run: |
        docker push my-flask-app:${{ github.sha }}
        docker tag my-flask-app:${{ github.sha }} my-docker-repo/my-flask-app:${{ github.sha }}
        docker push my-docker-repo/my-flask-app:${{ github.sha }}

    - name: Deploy to Production (Optional)
      run: |
        # Deploy the container to your production environment
        # For example, running on EC2, Kubernetes, or another platform.
        echo "Deploy to your environment here"
 VERSION=$(git describe --tags --always || echo "unknown")
        SHA=$(git rev-parse HEAD || echo "unknown")
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "SHA=$SHA" >> $GITHUB_ENV
        echo "Version: $VERSION"
        echo "SHA: $SHA"

    - name: Build Docker image
      run: |
        docker build --build-arg VERSION=$VERSION --build-arg SHA=$SHA -t my-flask-app .

    - name: Push Docker image to registry
      run: |
        docker tag my-flask-app myusername/my-flask-app:$SHA
        docker push myusername/my-flask-app:$SHA


# Use the official Python image
FROM python:3.9-slim

# Set build arguments for version and SHA
ARG VERSION
ARG SHA

# Set the working directory in the container
WORKDIR /app

# Copy the current directory contents into the container
COPY . /app

# Install the dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Set environment variables for the Flask app
ENV VERSION=$VERSION
ENV SHA=$SHA

# Expose port 5000 for the Flask app
EXPOSE 5000

# Command to run the Flask app
CMD ["python", "main.py"]


from flask import Flask, jsonify
import os

app = Flask(__name__)

@app.route("/")
def hello():
    return jsonify({"message": "Hello World"})

@app.route("/status")
def status():
    version = os.getenv("VERSION", "unknown")
    sha = os.getenv("SHA", "unknown")
    
    return jsonify({
        "my-application": [
            {
                "description": "my-application's description.",
                "version": version,
                "sha": sha
            }
        ]
    })

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
